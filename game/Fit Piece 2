local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

local GName = "Fit Piece 2" -- game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

local Window = WindUI:CreateWindow({
    Title = GName .. "[ Version 1.0.0 ]",
    Icon = "rbxassetid://139030006778308",
    Author = "Tien Thanh",
    Folder = "FP2_TT",
    Size = UDim2.fromOffset(540, 340),
    Transparent = true,
    Theme = "Dark",
    UserEnabled = false,
    SideBarWidth = 170,
    HasOutline = true,
	ToggleKey = Enum.KeyCode.RightControl,
})

Window:EditOpenButton({
    Title = "O",
    Icon = "rbxassetid://139030006778308",
    CornerRadius = UDim.new(0, 10),
    StrokeThickness = 2,
    Color = ColorSequence.new( 
        Color3.fromHex("00FF9F"),  
        Color3.fromHex("00FFF7")   
    ),
    Draggable = true,
})

WindUI:AddTheme({
    Name = "NeoCyber",
    Accent = "#00D6AA",          
    Outline = "#15181D",           
    Background = "#0E1117",        
    SecondaryBackground = "#1A1F27",
    Text = "#C2F0F0",               
    PlaceholderText = "#5A7F7F"     
})

WindUI:SetTheme("NeoCyber")

local Configs = {
    Spamchat = false,
    TextChat = "",
    selectedMode_AutoChest = "Teleport", 
    isFeatureEnabled = false, 
    S_I = "",
    S_ST = "",
    S_TE = "",
}

local Tabs = {
    Main = Window:Tab({ Title = "Main", Icon = "rbxassetid://7733960981" }),
    Item = Window:Tab({ Title = "Item", Icon = "gamepad-2" }),
    b = Window:Divider(),
    WindowTab = Window:Tab({ Title = "Window", Icon = "settings", Desc = "Manage window settings and file configurations." }),
    CreateThemeTab = Window:Tab({ Title = "Theme", Icon = "palette", Desc = "Design and apply custom themes." }),
}

Window:SelectTab(1)
Tabs.Main:Section({ Title = "Auto Chest", TextXAlignment = "Center" })
local noclipConnection
local activeTween

local function MoveToPosition(targetPosition)
    local character = game:GetService("Players").LocalPlayer.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if Configs.selectedMode_AutoChest == "Teleport" then
        hrp.CFrame = CFrame.new(targetPosition)
    elseif Configs.selectedMode_AutoChest == "Fly" then
        if activeTween then
            activeTween:Cancel()
        end
        local distance = (hrp.Position - targetPosition).Magnitude
        local tweenInfo = TweenInfo.new(
            distance / 1000,
            Enum.EasingStyle.Linear
        )
        activeTween = game:GetService("TweenService"):Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPosition)})
        activeTween:Play()
        activeTween.Completed:Wait()
        activeTween = nil
    end
end

local function CheckAndMove()
    if not Configs.isFeatureEnabled_AutoChest then return end

    for _, model in ipairs(workspace.Mapa.Scripts.Baus:GetChildren()) do
        if not Configs.isFeatureEnabled_AutoChest then break end
        if model:IsA("Model") then
            local primaryPart = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
            if primaryPart then
                MoveToPosition(primaryPart.Position)
                task.wait(1)
            end
        end
    end
end

local function EnableNoclip()
    if noclipConnection then return end
    noclipConnection = game:GetService("RunService").Stepped:Connect(function()
        if not Configs.isFeatureEnabled_AutoChest or Configs.selectedMode_AutoChest ~= "Fly" then return end
        local character = game:GetService("Players").LocalPlayer.Character
        if character then
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local function DisableNoclip()
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
        local character = game:GetService("Players").LocalPlayer.Character
        if character then
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

Tabs.Main:Dropdown({
    Title = "Select",
    Values = { "Teleport", "Fly" },
    Value = "Teleport",
    Callback = function(option)
        Configs.selectedMode_AutoChest = option
        if option == "Fly" and Configs.isFeatureEnabled_AutoChest then
            EnableNoclip()
        else
            DisableNoclip()
        end
    end
})

Tabs.Main:Toggle({
    Title = "Enable Feature",
    Default = true,
    Callback = function(state)
        Configs.isFeatureEnabled_AutoChest = state
        if activeTween then
            activeTween:Cancel()
            activeTween = nil
        end
        if state then
            if Configs.selectedMode_AutoChest == "Fly" then
                EnableNoclip()
            end
            spawn(function()
                while Configs.isFeatureEnabled_AutoChest do
                    CheckAndMove()
                    task.wait(0.1)
                end
            end)
        else
            DisableNoclip()
        end
    end
})

local debounce = false
workspace.Mapa.Scripts.Baus.ChildAdded:Connect(function()
    if Configs.isFeatureEnabled_AutoChest and not debounce then
        debounce = true
        CheckAndMove()
        task.wait(0.5)
        debounce = false
    end
end)

Tabs.Main:Section({ Title = "Text Chat", TextXAlignment = "Center" })
Tabs.Main:Input({
    Title = "Input",
    Callback = function(input)
        Configs.TextChat = input
    end
})
Tabs.Main:Toggle({
    Title = "Spam Chat",
    Default = false,
    Callback = function(state)
        Configs.Spamchat = state
        if Configs.Spamchat then
            while Configs.Spamchat do
                game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer(Configs.TextChat, "All")
                wait(1)
            end
        end
    end
})
Tabs.Item:Section({ Title = "Inventory", TextXAlignment = "Center" })
function g_Inv()
    local n = {}
    for _, folder in ipairs({game:GetService("Players").LocalPlayer.InventoryList, game:GetService("Players").LocalPlayer.InventoryList3, game:GetService("Players").LocalPlayer.InventoryList4}) do
        for _, item in ipairs(folder:GetChildren()) do
            table.insert(n, item.Name)
        end
    end
    return n
end

Tabs.Item:Dropdown({
    Title = "Select",
    Values = g_Inv(),
    Value = "",
    Callback = function(option)
        if game:GetService("Players").LocalPlayer.InventoryList:FindFirstChild(option) then
            game:GetService("ReplicatedStorage").All.Events.Remotes2.Inventory:FireServer(option)
        end
        if game:GetService("Players").LocalPlayer.InventoryList3:FindFirstChild(option) then
            game:GetService("ReplicatedStorage").All.Events.Remotes2.Inventory3:FireServer(option)
        end
        if game:GetService("Players").LocalPlayer.InventoryList4:FindFirstChild(option) then
            game:GetService("ReplicatedStorage").All.Events.Remotes2.Inventory4:FireServer(option)
        end
    end
})

Tabs.Item:Section({ Title = "Shop Items", TextXAlignment = "Center" })
local CS_T = { 
    "Orb Yellow", "Sung Hair", "Orb White", "Itadori Hair", "Orb Red", "Shanks Hair", "Orb Blue", "Yuta Hair", "Goku Hair", "Hokyoku", "Cid Eye"
}
Tabs.Item:Dropdown({
    Title = "Select",
    Values = CS_T,
    Value = "",
    Callback = function(option)
        Configs.S_ST = option
    end
})
Tabs.Item:Button({
    Title = "Get",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("ShopItem"):FireServer("Buy",Configs.S_ST,0)
    end
})

Tabs.Item:Section({ Title = "Shop", TextXAlignment = "Center" })
local G_Items = { 
    "Wood Sword", "Pirate Hat", "Sung", "Goku Book"
}
Tabs.Item:Dropdown({
    Title = "Select",
    Values = G_Items,
    Value = "",
    Callback = function(option)
        Configs.S_I = option
    end
})
Tabs.Item:Button({
    Title = "Buy",
    Callback = function()
        if Configs.S_I == "Wood Sword" then
            game:GetService("ReplicatedStorage"):WaitForChild("Shop"):FireServer("Buy","Sword Wood Caixa",0)
        elseif Configs.S_I == "Pirate Hat" then
            game:GetService("ReplicatedStorage"):WaitForChild("Shop"):FireServer("Buy","PC",0)
        elseif Configs.S_I == "Sung" then
            game:GetService("ReplicatedStorage"):WaitForChild("AddToolToPlayer"):FireServer("Sung Box")
        end
    end
})
Tabs.Item:Section({ Title = "Tools", TextXAlignment = "Center" })
function g_nameTool()
    local n={}
    for _, tool in pairs(game:GetService("ReplicatedStorage").All.Tools:GetChildren()) do
        if tool.ClassName == "Tool" then
            table.insert(n, tool.Name)
        end
    end
    return n
end
Tabs.Item:Dropdown({
    Title = "Select",
    Values = g_nameTool(),
    Value = "",
    Callback = function(option)
        Configs.S_TE = option
    end
})
Tabs.Item:Button({
    Title = "Get",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("AddToolToPlayer"):FireServer(Configs.S_TE)
    end
})
Tabs.Item:Button({
    Title = "Get All",
    Callback = function()
        for _, tool in pairs(game:GetService("ReplicatedStorage").All.Tools:GetChildren()) do
            if tool.ClassName == "Tool" then
                game:GetService("ReplicatedStorage"):WaitForChild("AddToolToPlayer"):FireServer(tool.name)
            end
        end
    end
})


Tabs.Item:Section({ Title = "Redeem Code", TextXAlignment = "Center" })
Tabs.Item:Button({
    Title = "Redeem All Code",
    Callback = function()
        for _, code in pairs(game:GetService("Players").LocalPlayer:WaitForChild("Codes"):GetChildren()) do
            if code:IsA("StringValue") or code:IsA("ValueBase") then
                game:GetService("ReplicatedStorage"):WaitForChild("RedeemCode"):FireServer(code.Name)
                WindUI:Notify({
                    Title = "Fit Piece 2",
                    Content = "Code redeemed: " .. code.Name,
                    Duration = 3,
                })
                wait(0.5)
            end
        end
        WindUI:Notify({
            Title = "Fit Piece 2",
            Content = "Completed redeem all codes!",
            Duration = 5,
        })
    end
})



-- Configuration
-- Optional


local HttpService = game:GetService("HttpService")

local folderPath = "WindUI"
makefolder(folderPath)

local function SaveFile(fileName, data)
    local filePath = folderPath .. "/" .. fileName .. ".json"
    local jsonData = HttpService:JSONEncode(data)
    writefile(filePath, jsonData)
end

local function LoadFile(fileName)
    local filePath = folderPath .. "/" .. fileName .. ".json"
    if isfile(filePath) then
        local jsonData = readfile(filePath)
        return HttpService:JSONDecode(jsonData)
    end
end

local function ListFiles()
    local files = {}
    for _, file in ipairs(listfiles(folderPath)) do
        local fileName = file:match("([^/]+)%.json$")
        if fileName then
            table.insert(files, fileName)
        end
    end
    return files
end

Tabs.WindowTab:Section({ Title = "Window" })

local themeValues = {}
for name, _ in pairs(WindUI:GetThemes()) do
    table.insert(themeValues, name)
end

local themeDropdown = Tabs.WindowTab:Dropdown({
    Title = "Select Theme",
    Multi = false,
    AllowNone = false,
    Value = nil,
    Values = themeValues,
    Callback = function(theme)
        WindUI:SetTheme(theme)
    end
})
themeDropdown:Select(WindUI:GetCurrentTheme())

local ToggleTransparency = Tabs.WindowTab:Toggle({
    Title = "Toggle Window Transparency",
    Callback = function(e)
        Window:ToggleTransparency(e)
    end,
    Value = WindUI:GetTransparency()
})

Tabs.WindowTab:Section({ Title = "Save" })

local fileNameInput = ""
Tabs.WindowTab:Input({
    Title = "Write File Name",
    PlaceholderText = "Enter file name",
    Callback = function(text)
        fileNameInput = text
    end
})

Tabs.WindowTab:Button({
    Title = "Save File",
    Callback = function()
        if fileNameInput ~= "" then
            SaveFile(fileNameInput, { Transparent = WindUI:GetTransparency(), Theme = WindUI:GetCurrentTheme() })
        end
    end
})

Tabs.WindowTab:Section({ Title = "Load" })

local filesDropdown
local files = ListFiles()

filesDropdown = Tabs.WindowTab:Dropdown({
    Title = "Select File",
    Multi = false,
    AllowNone = true,
    Values = files,
    Callback = function(selectedFile)
        fileNameInput = selectedFile
    end
})

Tabs.WindowTab:Button({
    Title = "Load File",
    Callback = function()
        if fileNameInput ~= "" then
            local data = LoadFile(fileNameInput)
            if data then
                WindUI:Notify({
                    Title = "File Loaded",
                    Content = "Loaded data: " .. HttpService:JSONEncode(data),
                    Duration = 5,
                })
                if data.Transparent then 
                    Window:ToggleTransparency(data.Transparent)
                    ToggleTransparency:SetValue(data.Transparent)
                end
                if data.Theme then WindUI:SetTheme(data.Theme) end
            end
        end
    end
})

Tabs.WindowTab:Button({
    Title = "Overwrite File",
    Callback = function()
        if fileNameInput ~= "" then
            SaveFile(fileNameInput, { Transparent = WindUI:GetTransparency(), Theme = WindUI:GetCurrentTheme() })
        end
    end
})

Tabs.WindowTab:Button({
    Title = "Refresh List",
    Callback = function()
        filesDropdown:Refresh(ListFiles())
    end
})

local currentThemeName = WindUI:GetCurrentTheme()
local themes = WindUI:GetThemes()

local ThemeAccent = themes[currentThemeName].Accent
local ThemeOutline = themes[currentThemeName].Outline
local ThemeText = themes[currentThemeName].Text
local ThemePlaceholderText = themes[currentThemeName].PlaceholderText

function updateTheme()
    WindUI:AddTheme({
        Name = currentThemeName,
        Accent = ThemeAccent,
        Outline = ThemeOutline,
        Text = ThemeText,
        PlaceholderText = ThemePlaceholderText
    })
    WindUI:SetTheme(currentThemeName)
end

local CreateInput = Tabs.CreateThemeTab:Input({
    Title = "Theme Name",
    Value = currentThemeName,
    Callback = function(name)
        currentThemeName = name
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Background Color",
    Default = Color3.fromHex(ThemeAccent),
    Callback = function(color)
        ThemeAccent = color:ToHex()
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Outline Color",
    Default = Color3.fromHex(ThemeOutline),
    Callback = function(color)
        ThemeOutline = color:ToHex()
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Text Color",
    Default = Color3.fromHex(ThemeText),
    Callback = function(color)
        ThemeText = color:ToHex()
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Placeholder Text Color",
    Default = Color3.fromHex(ThemePlaceholderText),
    Callback = function(color)
        ThemePlaceholderText = color:ToHex()
    end
})

Tabs.CreateThemeTab:Button({
    Title = "Update Theme",
    Callback = function()
        updateTheme()
    end
})